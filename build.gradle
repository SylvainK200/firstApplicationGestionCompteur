plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.jlink' version '2.22.0' // For executable file
}

repositories {
    mavenCentral()
}



ext {
    junitVersion = '5.7.1'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
task processPackageResources(type: Copy) {
    duplicatesStrategy = 'include'
}


application {
    mainClass = 'Gui.Main2'
}

mainClassName = 'Gui.Main2'
//11.0.2

javafx {
    version = '15.0.1'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    implementation('org.controlsfx:controlsfx:11.1.0')
    implementation group: 'com.jfoenix', name: 'jfoenix', version: '9.0.10'
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.14.6'

    implementation group: 'org.json', name: 'json', version: '20201115'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.3'
    implementation 'org.projectlombok:lombok:1.18.22'
    implementation 'org.projectlombok:lombok:1.18.22'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'

    implementation group: 'com.google.zxing', name: 'core', version: '3.3.0'
    implementation group: 'com.google.zxing', name: 'javase', version: '3.3.0'

    implementation 'org.testfx:testfx-core:4.0.16-alpha'
    implementation 'org.loadui:testFx:3.1.2'

//    compile "org.openjfx:javafx-graphics:11.0.1:win"
//    compile "org.openjfx:javafx-graphics:11.0.1:linux"
//    compile "org.openjfx:javafx-graphics:11.0.1:mac"
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.0.1'
    implementation ("org.testfx:testfx-junit5:4.0.16-alpha")
    testImplementation "org.hamcrest:hamcrest-junit:2.0.0.0"

}
configurations {
    all.collect { configuration ->
        configuration.exclude group: 'org.hamcrest', module: 'hamcrest-core'
        configuration.exclude group: 'org.hamcrest', module: 'hamcrest-all'
    }
}

jar {
    manifest {
        attributes["Main-Class"] = 'Gui.Main2'
    }
    duplicatesStrategy = 'include'
    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

test {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
        events = ["passed", "failed", "skipped"]
    }
}

task fatJar(type: Jar) {
  manifest {
    attributes 'Main-Class': 'Gui.Main2'
  }
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  archiveClassifier = "all"
  from {
    //configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
  with jar
}

jlink {
    launcher {
        name = 'exe_name'
    }
}